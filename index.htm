<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Automated Poker Interface with Side Pots</title>
<style>
  body {font-family: Inter, system-ui, sans-serif; background: #0b1220; color: #e6eef6; margin: 0; padding: 20px;}
  h1 {margin-bottom: 10px;}
  .setup, .table {background: #111a2a; border-radius: 12px; padding: 16px; margin-bottom: 16px;}
  .setup input, .setup select {margin: 4px; padding: 6px; border-radius: 6px; border: 1px solid #333; background: #0f1724; color: #e6eef6;}
  .btn {background: #ffcc00; color: #04111a; border: none; border-radius: 8px; padding: 8px 12px; cursor: pointer; font-weight: 600;}
  .player {background: #162238; border-radius: 8px; padding: 8px; margin: 8px 0; transition: opacity 0.3s ease, filter 0.3s ease; position: relative;}
  .player.folded {opacity: 0.5; text-decoration: line-through; filter: grayscale(0.8);}
  .player.current {box-shadow: 0 0 10px #ffcc00;}
  .dealer-badge, .sb-badge, .bb-badge {
    position: absolute; top: 5px; right: 5px; font-size: 12px; padding: 2px 4px; border-radius: 4px; font-weight: bold;
  }
  .dealer-badge {background:#ffcc00; color:#04111a;}
  .sb-badge {background:#57c1ff; color:#012a39;}
  .bb-badge {background:#7ee06a; color:#023200;}
  .controls button {margin-right: 6px; margin-top: 4px;}
  .log {background:#08121d; padding:8px; border-radius:6px; height:160px; overflow:auto; font-size:13px;}
  #roundIndicator {font-size: 18px; color: #ffcc00; margin-top: 10px; text-align: center;}
  .pots {display:flex; gap:8px; justify-content:center; margin-top:10px; flex-wrap:wrap;}
  .pot-box {background:#223b57; border:2px solid #ffcc00; border-radius:10px; padding:10px 16px; min-width:100px; text-align:center; font-weight:bold;}
</style>
</head>
<body>
<h1>Automated Poker Interface with Side Pots</h1>

<div class="setup" id="setup">
  <h3>Game Setup</h3>
  <label>Number of Players:</label>
  <select id="numPlayers">
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
    <option value="6">6</option>
  </select>
  <label>Starting Chips:</label>
  <input type="number" id="startingChips" value="500" min="1" />
  <label>Small Blind:</label>
  <input type="number" id="sbAmount" value="10" min="1" />
  <label>Big Blind:</label>
  <input type="number" id="bbAmount" value="20" min="1" />
  <div id="nameInputs"></div>
  <button class="btn" onclick="startGame()">Start Game</button>
</div>

<div class="table" id="table" style="display:none;">
  <h3>Game Table</h3>
  <div id="players"></div>

  <div class="controls">
    <button class="btn" id="foldBtn">Fold</button>
    <button class="btn" id="checkCallBtn">Check / Call</button>
    <button class="btn" id="betRaiseBtn">Bet / Raise</button>
    <input type="number" id="manualAmount" placeholder="Amount" min="1" style="width:100px;" />
    <select id="winnerSelect" style="margin-left:6px;"></select>
    <button class="btn" onclick="declareWinner()">Declare Winner</button>
  </div>

  <div id="roundIndicator"></div>
  <div class="pots" id="pots"></div>
  <div class="log" id="log"></div>
</div>

<script>
let players = [];
let currentBet = 0;
let pots = [];
let turn = 0;
let roundStage = 0;
let dealerIndex = -1;

document.getElementById('numPlayers').addEventListener('change', generateNameInputs);
function generateNameInputs(){
  const n = Number(document.getElementById('numPlayers').value);
  const container = document.getElementById('nameInputs');
  container.innerHTML = '';
  for(let i=0;i<n;i++){
    container.innerHTML += `<div><label>Player ${i+1} Name:</label> <input type='text' id='pname-${i+1}' value='Player ${i+1}' /></div>`;
  }
}
generateNameInputs();

function startGame(){
  const n = Number(document.getElementById('numPlayers').value);
  const startChips = Number(document.getElementById('startingChips').value);
  players = [];
  for(let i=0;i<n;i++){
    players.push({id:i+1, name: document.getElementById('pname-'+(i+1)).value || 'Player '+(i+1),
                  stack:startChips, bet:0, active:true, allin:false, hasActed:false, contribution:0});
  }
  pots = [{name:'Main Pot', amount:0, eligiblePlayers:[...players]}];
  document.getElementById('setup').style.display='none';
  document.getElementById('table').style.display='block';
  dealerIndex = -1;
  startHand();
}

function startHand(){
  dealerIndex = (dealerIndex + 1) % players.length;

  players.forEach(p=>{
    if(p.stack>0){
      p.active=true; p.bet=0; p.allin=false; p.hasActed=false; p.contribution=0;
    } else p.active=false;
  });

  pots = [{name:'Main Pot', amount:0, eligiblePlayers:players.filter(p=>p.stack>0)}];
  roundStage = 0;
  currentBet = 0;

  postBlinds();
  currentBet = players[getBBIndex()].bet;
  turn = getNextActivePlayer(getBBIndex()+1);

  renderPlayers();
  renderPots();
  updateRoundIndicator();
  log(`--- New Hand --- Dealer: ${players[dealerIndex].name}`);
  updateWinnerDropdown();
}

function postBlinds(){
  const sbAmount = Number(document.getElementById('sbAmount').value);
  const bbAmount = Number(document.getElementById('bbAmount').value);
  postBlind(getSBIndex(), sbAmount, 'Small Blind');
  postBlind(getBBIndex(), bbAmount, 'Big Blind');
}

function getSBIndex(){ return getNextActivePlayer(dealerIndex+1); }
function getBBIndex(){ return getNextActivePlayer(getSBIndex()+1); }

function postBlind(index, amount, type){
  const p = players[index];
  const paid = Math.min(p.stack, amount);
  p.stack -= paid;
  p.bet += paid;
  p.contribution += paid;
  if(p.stack===0) p.allin=true;
  updatePots();
  log(`${p.name} posts ${type} of ${paid}`);
}

function getNextActivePlayer(start){
  let idx = start % players.length;
  const startIdx = idx;
  do{
    if(players[idx].active && !players[idx].allin) return idx;
    idx = (idx+1) % players.length;
  } while(idx !== startIdx);
  return idx; // fallback
}

function renderPlayers(){
  const playersEl = document.getElementById('players');
  playersEl.innerHTML = '';
  players.forEach((p,i)=>{
    const div = document.createElement('div'); 
    div.className='player';
    if(!p.active) div.classList.add('folded');
    if(i===turn && p.active) div.classList.add('current');
    let badges='';
    if(i===dealerIndex) badges+=`<span class="dealer-badge">D</span>`;
    if(i===getSBIndex()) badges+=`<span class="sb-badge">SB</span>`;
    if(i===getBBIndex()) badges+=`<span class="bb-badge">BB</span>`;
    div.innerHTML = `<strong>${p.name}</strong> ${badges}<br>`+
                    `Stack: ${p.stack} | Bet: ${p.bet}${p.allin ? ' <span style="color:#ff6666">(All-in)</span>':''}`;
    playersEl.appendChild(div);
  });
}

function renderPots(){
  const potsEl = document.getElementById('pots');
  potsEl.innerHTML = '';
  pots.forEach(p=>{
    const div = document.createElement('div');
    div.className = 'pot-box';
    div.innerHTML = `${p.name}: ${p.amount}`;
    potsEl.appendChild(div);
  });
}

// --- GAME ACTIONS ---
document.getElementById('foldBtn').onclick = ()=>{ fold(); };
document.getElementById('checkCallBtn').onclick = ()=>{ checkCall(); };
document.getElementById('betRaiseBtn').onclick = ()=>{ betRaise(); };

function fold(){
  players[turn].active=false;
  players[turn].hasActed=true;
  log(players[turn].name+' folds.');
  renderPlayers();
  nextTurn();
}

function checkCall(){
  const p = players[turn];
  if(!p.active||p.allin){ nextTurn(); return; }
  const diff = currentBet - p.bet;
  if(diff<=0) log(p.name+' checks.');
  else {
    const callAmt=Math.min(diff, p.stack);
    p.stack-=callAmt;
    p.bet+=callAmt;
    p.contribution += callAmt;
    if(p.stack===0) p.allin=true;
    updatePots();
    log(callAmt===diff?`${p.name} calls ${diff}`:`${p.name} goes all-in with ${callAmt}`);
  }
  p.hasActed = true;
  renderPlayers();
  renderPots();
  nextTurn();
}

function betRaise(){
  const amt=Number(document.getElementById('manualAmount').value)||0;
  if(amt<=0) return log('Enter valid amount');
  const p = players[turn];
  const minCall = currentBet - p.bet;
  if(amt<minCall && amt<p.stack) return log(`Bet must be at least ${minCall} unless going all-in.`);
  if(p.stack<amt) return log('Not enough chips.');
  p.stack-=amt;
  p.bet+=amt;
  p.contribution += amt;
  currentBet=p.bet;
  if(p.stack===0) p.allin=true;
  updatePots();
  p.hasActed = true;
  log(`${p.name} bets/raises ${amt}`);
  document.getElementById('manualAmount').value='';
  renderPlayers();
  renderPots();
  nextTurn();
}

// --- SIDE POT LOGIC ---
function updatePots(){
  let contributions = players.map(p=>p.contribution);
  if(contributions.every(c=>c===0)) return;

  contributions.sort((a,b)=>a-b);
  pots = [];
  let prev = 0;
  let potIndex = 0;
  while(contributions.length>0){
    const min = contributions[0];
    const eligible = players.filter(p=>p.contribution >= min);
    const potAmount = (min - prev) * eligible.length;
    pots.push({name: potIndex===0?'Main Pot':`Side Pot ${potIndex}`, amount:potAmount, eligiblePlayers:eligible});
    prev = min;
    contributions = contributions.filter(c=>c>min);
    potIndex++;
  }
}

// --- TURN & ROUND MANAGEMENT ---
function nextTurn(){
  const stillIn = players.filter(p=>p.active);
  if(stillIn.length<=1){
    log('Hand over. '+stillIn[0].name+' wins!');
    declareWinner(stillIn[0].name);
    return;
  }

  const activeNotAllIn = players.filter(p=>p.active && !p.allin);
  if(activeNotAllIn.length===0){ advanceRound(); return; }

  const allBetsMatched = stillIn.every(p=>p.bet===currentBet||p.allin);
  const allActed = stillIn.every(p=>p.hasActed);

  if(allBetsMatched && allActed){
    advanceRound();
    return;
  }

  turn = getNextActivePlayer(turn+1);
  renderPlayers();
}

function advanceRound(){
  roundStage++;
  players.forEach(p=>p.hasActed=false);
  players.forEach(p=>p.bet=0);
  currentBet=0;

  if(roundStage===1) log('--- FLOP ---');
  else if(roundStage===2) log('--- TURN ---');
  else if(roundStage===3) log('--- RIVER ---');
  else if(roundStage>3){ log('Showdown!'); document.getElementById('roundIndicator').textContent=''; return; }

  turn = getNextActivePlayer(dealerIndex+1);
  updateRoundIndicator();
  renderPlayers();
}

function updateRoundIndicator(){
  const indicator=document.getElementById('roundIndicator');
  if(roundStage===0) indicator.textContent='Pre-Flop';
  else if(roundStage===1) indicator.textContent='Flop';
  else if(roundStage===2) indicator.textContent='Turn';
  else if(roundStage===3) indicator.textContent='River';
}

function log(msg){
  const logEl=document.getElementById('log');
  const time=new Date().toLocaleTimeString();
  logEl.innerHTML=`<div>[${time}] ${msg}</div>`+logEl.innerHTML;
  logEl.scrollTop = 0;
}

function updateWinnerDropdown(){
  const select = document.getElementById('winnerSelect');
  select.innerHTML = '';
  players.filter(p=>p.stack>0).forEach(p=>{
    const option = document.createElement('option');
    option.value = p.name; option.textContent = p.name;
    select.appendChild(option);
  });
}

function declareWinner(name){
  const select = document.getElementById('winnerSelect');
  let winnerName = name || select.value;
  const winner = players.find(p=>p.name===winnerName);
  if(!winner) return log("No such player.");

  let totalWon = 0;
  pots.forEach(pot=>{
    if(pot.eligiblePlayers.includes(winner)){
      winner.stack += pot.amount;
      totalWon += pot.amount;
    }
  });

  players.forEach(p=>{
    if(p.stack>0){ p.bet=0; p.active=true; p.allin=false; p.hasActed=false; p.contribution=0; }
    else { p.active=false; log(`${p.name} is out of chips!`); }
  });

  pots=[{name:'Main Pot', amount:0, eligiblePlayers:players.filter(p=>p.stack>0)}];
  renderPlayers();
  renderPots();
  updateRoundIndicator();
  log(`${winner.name} wins all applicable pots (${totalWon} chips)!`);
  updateWinnerDropdown();
  startHand();
}
</script>
</body>
</html>
